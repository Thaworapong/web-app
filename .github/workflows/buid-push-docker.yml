name: CI, Build Docker & Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Check if requirements.txt exists
        id: check_requirements
        run: |
          if [ -f "requirements.txt" ]; then
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Install dependencies (only if requirements.txt exists)
        if: env.exists == 'true'
        run: pip install -r requirements.txt

      - name: Set execute permissions for test scripts
        run: chmod +x test-scripts/*.py

      - name: Run test script 1
        run: python test-scripts/demo-test1.py

      - name: Run test script 2
        run: python test-scripts/demo-test2.py

  build_and_push:
    runs-on: ubuntu-latest
    needs: test  # Only runs if 'test' job succeeds
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: thaworapong/testing:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push  # Runs only if Docker build succeeds
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/

      - name: Terraform Plan
        env:
          TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}
        run: terraform plan -out=tfplan
        working-directory: terraform/

      - name: Terraform Apply
        env:
          TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}
        run: terraform apply -auto-approve
        working-directory: terraform/
